from django.test import TestCase
from apps.accounts.models import User
from .models import Cuisine, SavedRecipe
from .utils import send_email

# Set environment variables in Terminal session before running tests.py
# Required environment variables for this application are 1) SPOONACULAR_API_KEY and 2) MAILGUN_API_KEY

# Create your tests here.
class test_home_page(TestCase):
    def test_shows_homepage(self):
        # Check the homepage for some key elements
        response = self.client.get('')
        self.assertContains(response, 'Recipes for You')
        self.assertContains(response, 'Select a Cuisine')

class test_sign_up(TestCase):
    def test_shows_signup_at_home(self):
        # check the homepage to see if signup link is present
        response = self.client.get('')
        self.assertContains(response, 'Sign-up</a>')
        
    def test_shows_signup_at_login(self):
        # check the login page to see if signup link is present
        response = self.client.get('/account/login/')
        self.assertContains(response, 'Sign-up</a>')
        
    def test_shows_signup_form(self):
        # check the signup page for input fields
        response = self.client.get('/account/signup/')
        self.assertContains(response, 'Username')
        self.assertContains(response, 'Email address')
        self.assertContains(response, 'Password')
        self.assertContains(response, 'Password confirmation')

    def test_submit_creates_new_user(self):
        # first make sure that there are no users
        user_count = User.objects.count()
        self.assertEqual(user_count, 0)
        
        # simulate the post request generated by the signup form
        self.client.post('/account/signup/', {
            'username': 'testuser',
            'email': 'testuser@awjdthornton.com',
            'password1': 'P@ssword#23',
            'password2': 'P@ssword#23',
            })
            
        # check to make sure a new user was created
        user_count = User.objects.count()
        self.assertEqual(user_count, 1)
        
        # check to make sure the user has the attributes entered
        user = User.objects.get(username='testuser')
        self.assertEqual(user.username, 'testuser')
        self.assertEqual(user.email, 'testuser@awjdthornton.com')
        self.assertEqual(user.check_password('P@ssword#23'), True)

class test_spoonacular_api(TestCase):
    def setUp(self):
        cuisine = Cuisine.objects.create(name="cajun")
        
    def test_cuisine_list(self):
        response = self.client.get('')
        html = '<a class="dropdown-item" href="/1/#select-a-cuisine">Cajun</a>'
        self.assertContains(response, html)
    
    def test_get_random_recipe(self):
        response = self.client.get('/1/')
        self.assertContains(response,'<h5><strong>Cajun</strong> Recipe</h5>')
    
    def test_get_recipe_details(self):
        response = self.client.get('/recipe/532771/')
        self.assertContains(response,'<h1>Cajun Roasted Chicken And Vegetable 15 Bean Soup</h1>')

class test_login_save_recipe(TestCase):
    # create testuser and login
    def setUp(self):
        test_user = User.objects.create(username='testuser')
        test_user.set_password('P@ssword#23')
        test_user.save()
        self.client.login(username='testuser', password='P@ssword#23')
        
    # no saved recipes initially
    def test_no_saved_recipes(self):
        response = self.client.get('/account/users/testuser/')
        self.assertNotContains(response, 'Link to recipe here!')
    
    # save a recipe and check for presence on user page
    def test_save_a_recipe(self):
        self.client.get('/save-recipe/532771/')
        response = self.client.get('/account/users/testuser/')
        self.assertContains(response, '<h4 class="card-title"> Cajun Roasted Chicken and Vegetable 15 Bean Soup </h4>')

class test_mailgun_api(TestCase):
    # just call send_email
    def test_email(self):
        msg = 'Testing the Eat-the-World app - SAMPLE EMAIL'
        x = send_email(msg)
        self.assertEqual(x, 200)

